<<<<<<< Updated upstream
=======
# Creation date: 11 Nov. 2016
# Last modified: 11 Nov. 2016
# Clear working space
rm(list=ls())
# Create dataframe
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F - FinalProject/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("X","X.1","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
## Define variables
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
P_toul_16 <- data[4,4]
P_psg_16 <- data[3,4]
max_diff <- c(rep(0,20))
diff_curr <- c(rep(0,20))
diff_futur <- c(rep(0,20))
coeff_diff <- c(rep(0,20))
## 1. Fill team quality score
data$Qual[1:20] <- (1-((P_psg_16 - data$Points.2015.16[1:20])/P_psg_16))*P_toul_16
## 2. Fill current form score
#maximum difficulty of matches
>>>>>>> Stashed changes
max_diff[1:20] <- 187 - (20 - data$Standings.2016.17[1:20])
#current form given match played
for(i in 1:20){
diff_curr[i] <- sum(20 - as.numeric(data[i,7:16])/2)
}
#difficulty of future matches
diff_futur <- max_diff - diff_curr
#difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
# Current form score
data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
## 3. Assign point prediction
data$PointsPredicted <- round(alpha_1*data$Qual + alpha_2*data$Form, digits = 0)
## 4. Plot league standing
output_data <- data[ ,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
output_data <- output_data[order(PointsPredicted, decreasing = TRUE), ]
output_data
# Grouped Bar Plot
#library(ggplot2)
#ggplot(output_data[1:5,], aes(x = X.1, y = PointsPredicted,)) + geom_bar(stat="identity", width=0.5)
View(output_data)
match_matrix <- data[1:20,7:16]
match_diff_coeff <- function(current_points, match_matrix){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
}
match_diff_coeff <- function(current_points, match_matrix){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
diff_coeff[1:20] <- match_diff_coeff(data[1:20], match_matrix)
diff_coeff[1:20] <- match_diff_coeff(data[1:20], match_matrix)
match_matrix <- data[1:20,7:16]
diff_coeff <- c(rep(0,20))
diff_coeff[1:20] <- match_diff_coeff(data[1:20], match_matrix)
diff_coeff[1:20] <- match_diff_coeff(data[1:20,6], match_matrix)
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
diff_coeff[1:20] <- match_diff_coeff(data[1:20,6], match_matrix)
current_points <- data[1:20,6]
diff_coeff[1:20] <- match_diff_coeff(current_points, match_matrix)
current_p <- data[1:20,6]
diff_coeff[1:20] <- match_diff_coeff(current_p, match_matrix)
current_p <- lapply(data[1:20,6], as.numeric)
diff_coeff[1:20] <- match_diff_coeff(current_p, match_matrix)
diff_coeff
diff_coeff <- match_diff_coeff(current_p, match_matrix)
current_p <- data[1:20,6]
current_p <- as.matrix(data[1:20,6])
diff_coeff <- match_diff_coeff(current_p, match_matrix)
match_matrix <- as.matrix(data[1:20,7:16])
diff_coeff <- c(rep(0,20))
current_p <- as.matrix(data[1:20,6])
diff_coeff <- match_diff_coeff(current_p, match_matrix)
diff_coeff
rm(list=ls())
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
score_team_qual <- function(team_points, leader_points, last_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_points
return(qual_score)
}
#' Team Quality Score function
#'
#' This function assigns a score evaluating the general quality
#' of a team based on its previous season relative standings.
#'
#' [INSERT MOTIVATION OF QUALITY SCORE FORMULA]
#'
#' Formula:
#' Team_i score = (1 - (Leader points - Team_i points) / leader points ) * last team points
#'
#' @export
#' @examples
#' score_team_qual()
score_team_qual <- function(team_points, leader_points, last_team_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_points
return(qual_score)
}
score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
output_data <- data
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
#' Team Quality Score function
#'
#' This function assigns a score evaluating the general quality
#' of a team based on its previous season relative standings.
#'
#' [INSERT MOTIVATION OF QUALITY SCORE FORMULA]
#'
#' Formula:
#' Team_i score = (1 - (Leader points - Team_i points) / leader points ) * last team points
#'
#' @export
#' @examples
#' score_team_qual()
score_team_qual <- function(team_points, leader_points, last_team_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_team_points
return(qual_score)
}
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
View(output_data)
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of all teams based on the first ten results of the current season.
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17")]
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of all teams based on the first ten results of the current season.
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current points, match matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
match_matrix <- as.matrix(data[1:20,7:16])
current_points <- as.matrix(data[1:20,6])
coeff_diff <- match_diff_coeff(current_points, match_matrix)
View(coeff_diff)
diff_coeff <- match_diff_coeff(current_points, match_matrix)
#maximum difficulty of matches
max_diff[1:20] <- 187 - (20 - data$Standings.2016.17[1:20])
#current form given match played
for(i in 1:20){
diff_curr[i] <- sum(20 - as.numeric(data[i,7:16])/2)
}
#difficulty of future matches
diff_futur <- max_diff - diff_curr
#difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
diff_curr <- c(rep(0,20))
max_diff[1:20] <- 187 - (20 - data$Standings.2016.17[1:20])
for(i in 1:20){
diff_curr[i] <- sum(20 - as.numeric(data[i,7:16])/2)
}
diff_futur <- max_diff - diff_curr
coeff_diff <- (diff_futur/diff_curr)
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
current_diff
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
match_diff_coeff(current_points, match_matrix)
max_diff <- 187 - (20 - current_points)
max_diff
rm(list=ls())
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
match_matrix <- as.matrix(data[1:20,7:16])
current_points <- as.matrix(data[1:20,6])
#Define Var
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
View(current_points)
max_diff <- 187 - (20 - current_points)
max_diff
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
current_diff
current_diff <- sum(20 - (match_matrix[,1:10]/2))
current_diff <- c(rep(0, n))
current_diff <- sum(20 - (match_matrix[,1:10]/2))
current_diff[i] <- sum(20 - (match_matrix[i,1:10]/2))
for(i in 1:20){
current_diff[i] <- sum(20 - (match_matrix[i,1:10]/2))
}
diff_futur <- max_diff - current_diff
View(diff_futur)
coeff_diff <- (diff_futur/current_diff)
View(coeff_diff)
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of all teams based on the first ten results of the current season.
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
# Note: Couldn't find a way to get rid of the for-loop, if anyone has an idea...
for(i in 1:n){
current_diff[i] <- sum(20 - as.numeric(match_matrix[i,1:10]/2))
}
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
library('devtools')
library("devtools")
setwd(dir)
name <- "PredictL1Package"
library("devtools")
dir <- "/Users/augustin/Documents/Programming/Les4F"
name <- "PredictL1Package"
setwd(dir)
create(name)
package.skeleton(name=name, path=dir)
setwd(paste(dir, name, sep="/"))
document()
install(name)
setwd(dir)
install(name)
install(name)
install(name)
rm(list=ls())
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
coeff_diff <- c(rep(0,20))
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17")]
data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
match_matrix <- as.matrix(data[1:20,7:16])
current_points <- as.matrix(data[1:20,6])
diff_coeff <- match_diff_coeff(current_points, match_matrix)
data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
data$PointsPredicted <- round(alpha_1*output_data$Qual.Score + alpha_2*output_data$Form, digits = 0)
View(output_data)
View(data)
data$PointsPredicted <- round(alpha_1*data$Qual.Score + alpha_2*data$Form, digits = 0)
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17","Qual.Score","Form","PointsPredicted")]
output_data <- output_data[order(output_data$PointsPredicted, decreasing = TRUE), ]
output_data
View(diff_coeff)
View(match_matrix)
View(current_points)
max_diff <- c(rep(0, n))
max_diff[1:20] <- 187 - (20 - current_points[1:20])
View(diff_coeff)
type(diff_coeff)
typeof(diff_coeff)
typeof(max_diff)
max_diff
View(data)
max_diff[1:20] <- 187 - (20 - current_points[1:20])
max_diff[1:20] <- 187 - (20 - data$ID[1:20])
max_diff
for(i in 1:n){
current_diff[i] <- sum((20 - as.numeric(match_matrix[i,1:10])/2)
}
current_diff[i] <- sum((20 - as.numeric(match_matrix[i,1:10])/2))
for(i in 1:n){
current_diff[i] <- sum((20 - as.numeric(match_matrix[i,1:10])/2))
}
current_diff <- c(rep(0, n))
for(i in 1:n){
current_diff[i] <- sum((20 - as.numeric(match_matrix[i,1:10])/2))
}
current_diff
current_diff[1] <- sum((20 - as.numeric(match_matrix[1,1:10])/2))
sum(as.numeric(match_matrix[1,1:10])/2)))
sum(as.numeric(match_matrix[1,1:10])/2))
sum(as.numeric(match_matrix[1,1:10])/2)
current_diff[2] <- sum((20 - as.numeric(match_matrix[2,1:10])/2))
match_matrix_inverse <- 20 - match_matrix
View(match_matrix_inverse)
match_matrix_inverse <- (20 - match_matrix)/2
match_diff_matrix <- (20 - match_matrix)/2
current_diff[1] <- sum(match_matrix[1,1:10])
sum(match_matrix[1,1:10])
sum(match_diff_matrix[1,1:10])
match_diff_matrix <- (20 - match_matrix)/2
for(i in 1:n){
current_diff[i] <- sum(match_diff_matrix[i,1:10]))
}
current_diff
current_diff[i] <- sum(match_diff_matrix[i,1:10])
for(i in 1:n){
current_diff[i] <- sum(match_diff_matrix[i,1:10])
}
current_diff
diff_futur <- max_diff - current_diff
diff_futur
coeff_diff <- (diff_futur/current_diff)
match_diff_coeff <- function(current_rank, match_matrix){
# Define variables
n <- length(current_rank)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff[1:20] <- 187 - (20 - current_rank[1:20])
# Compute the difficulty of first ten match played
#Rescale the match matrix to have expected difficulty of each match
match_diff_matrix <- (20 - match_matrix)/2
for(i in 1:n){
current_diff[i] <- sum(match_diff_matrix[i,1:10])
}
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
install(name)
name <- "PredictL1Package"
setwd(dir)
dir <- "/Users/augustin/Documents/Programming/Les4F"
name <- "PredictL1Package"
setwd(dir)
install(name)
current_rank <- as.matrix(data$ID)
current_rank <- as.matrix('data$ID')
View(current_rank)
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
coeff_diff <- c(rep(0,20))
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
View(data)
match_matrix <- as.matrix(data[1:20,7:16])
current_rank <- as.matrix('data$ID')
current_rank <- as.matrix(data$ID)
View(current_rank)
diff_coeff <- match_diff_coeff(current_points, match_matrix)
diff_coeff <- match_diff_coeff(current_rank, match_matrix)
data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
data$PointsPredicted <- round(alpha_1*data$Qual.Score + alpha_2*data$Form, digits = 0)
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17","Qual.Score","Form","PointsPredicted")]
output_data <- output_data[order(output_data$PointsPredicted, decreasing = TRUE), ]
output_data
diff_coeff <- match_diff_coeff(current_rank, match_matrix)
# Origin: Programming Fall 2016 - Final Project
# Filename: PredictLigue1.R
# Author: Les 4 Fantastriques (Edgard, Victor, Zydney, Augustin)
# Creation date: 11 Nov. 2016
# Last modified: 11 Nov. 2016
# Clear working space
rm(list=ls())
# Create dataframe
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
## 1. Define variables
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
diff_coeff <- c(rep(0,20))
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
## 2. Assign a quality score to each team
data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
## 3. Compute match difficulty coefficient
# Convert data into correct format for function use (don't really know why but otherwise it didn't work)
match_matrix <- as.matrix(data[1:20,7:16])
current_rank <- as.matrix(data$ID)
# Compute difficulty coefficient
diff_coeff <- match_diff_coeff(current_rank, match_matrix)
# 4. Assign Current form score
data$Form[1:20] <- (diff_coeff*data$Points.2016.17 + data$Points.2016.17)
## 5. Assign point prediction
data$PointsPredicted <- round(alpha_1*data$Qual.Score + alpha_2*data$Form, digits = 0)
## 4. Plot league standing
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17","Qual.Score","Form","PointsPredicted")]
output_data <- output_data[order(output_data$PointsPredicted, decreasing = TRUE), ]
output_data
# Origin: Programming Fall 2016 - Final Project
# Filename: PredictLigue1.R
# Author: Les 4 Fantastriques (Edgard, Victor, Zydney, Augustin)
# Creation date: 11 Nov. 2016
# Last modified: 11 Nov. 2016
# Clear working space
rm(list=ls())
# Create dataframe
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
## 1. Define variables
n = 20
alpha_1 <- 0.5
alpha_2 <- 0.5
diff_coeff <- c(rep(0,20))
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
## 2. Assign a quality score to each team
data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
## 3. Compute match difficulty coefficient
# Convert data into correct format for function use (don't really know why but otherwise it didn't work)
match_matrix <- as.matrix(data[1:20,7:16])
current_rank <- as.matrix(data$ID)
# Compute difficulty coefficient
diff_coeff <- match_diff_coeff(current_rank, match_matrix)
# 4. Assign Current form score
data$Form[1:20] <- (diff_coeff*data$Points.2016.17 + data$Points.2016.17)
## 5. Assign point prediction
data$PointsPredicted <- round(alpha_1*data$Qual.Score + alpha_2*data$Form, digits = 0)
## 4. Plot league standing
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17","Qual.Score","Form","PointsPredicted")]
output_data <- output_data[order(output_data$PointsPredicted, decreasing = TRUE), ]
<<<<<<< Updated upstream
output_data
=======
install.packages("/Users/Edgard/Documents/SciencesPo/Programming/Les4F/ProjectPackage")
setwd(/Users/Edgard/Documents/SciencesPo/Programming/Les4F/)
setwd(Users/Edgard/Documents/SciencesPo/Programming/Les4F/)
setwd("Users/Edgard/Documents/SciencesPo/Programming/Les4F/")
install('ProjectPackage')
install.packages('ProjectPackage')
build('ProjectPackage')
>>>>>>> Stashed changes

output_data
# Grouped Bar Plot
#library(ggplot2)
#ggplot(output_data[1:5,], aes(x = X.1, y = PointsPredicted,)) + geom_bar(stat="identity", width=0.5)
# Origin: Programming Fall 2016 - Final Project
# Filename: PredictLigue1.R
# Author: Les 4 Fantastriques (Edgard, Victor, Zydney, Augustin)
# Creation date: 11 Nov. 2016
# Last modified: 11 Nov. 2016
# Clear working space
rm(list=ls())
# Create dataframe
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F - FinalProject/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("X","X.1","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
## Define variables
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
P_toul_16 <- data[4,4]
P_psg_16 <- data[3,4]
max_diff <- c(rep(0,20))
diff_curr <- c(rep(0,20))
diff_futur <- c(rep(0,20))
coeff_diff <- c(rep(0,20))
## 1. Fill team quality score
data$Qual[1:20] <- (1-((P_psg_16 - data$Points.2015.16[1:20])/P_psg_16))*P_toul_16
## 2. Fill current form score
#maximum difficulty of matches
max_diff[1:20] <- 187 - (20 - data$Standings.2016.17[1:20])
#current form given match played
for(i in 1:20){
diff_curr[i] <- sum(20 - as.numeric(data[i,7:16])/2)
}
#difficulty of future matches
diff_futur <- max_diff - diff_curr
#difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
# Current form score
data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
## 3. Assign point prediction
data$PointsPredicted <- round(alpha_1*data$Qual + alpha_2*data$Form, digits = 0)
## 4. Plot league standing
output_data <- data[ ,c("X.1","Points.2015.16","Points.2016.17","PointsPredicted")]
output_data <- output_data[order(PointsPredicted, decreasing = TRUE), ]
output_data
# Grouped Bar Plot
#library(ggplot2)
#ggplot(output_data[1:5,], aes(x = X.1, y = PointsPredicted,)) + geom_bar(stat="identity", width=0.5)
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F - FinalProject/Data/Ligue1-data.csv", header = TRUE, sep = ";")
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
View(raw_data)
data <- raw_data[1:20,c("ID","Team Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
View(data)
match_matrix <- (data$M1:data$M10)
match_matrix <- (data$M1,data$M2,data$M3,data$M4,data$M5,data$M6,data$M7,data$M8,data$M9,data$M10)
match_matrix <- data$M1,data$M2,data$M3,data$M4,data$M5,data$M6,data$M7,data$M8,data$M9,data$M10
match_matrix <- data[1:20,7:17]
match_matrix <- data[1:20,7:16]
View(match_matrix)
diff_coeff[1] <- match_diff_coeff(data[1,6], match_matrix[1,])
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)  ## WHY DIVIDE BY 2 ?
# Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
}
match_matrix <- data[1:20,7:16]
diff_coeff[1] <- match_diff_coeff(data[1,6], match_matrix[1,])
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)  ## WHY DIVIDE BY 2 ?
# Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
return(coeff_diff)
}
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)  ## WHY DIVIDE BY 2 ?
# Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
return(coeff_diff)
}
coeff_diff <- (diff_futur/diff_curr)
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)  ## WHY DIVIDE BY 2 ?
# Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
}
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of a team based on its first ten results of the current season
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)  ## WHY DIVIDE BY 2 ?
# Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
}
match_matrix <- data[1:20,7:16]
diff_coeff[1] <- match_diff_coeff(data[1,6], match_matrix[1,])
}
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of a team based on its first ten results of the current season
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)  ## WHY DIVIDE BY 2 ?
# Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
}
match_matrix <- data[1:20,7:16]
diff_coeff[1] <- match_diff_coeff(data[1,6], match_matrix[1,])
score_team_qual <- function(team_points, leader_points, last_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_points
return(qual_score)
}
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of a team based on its first ten results of the current season
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)  ## WHY DIVIDE BY 2 ?
# Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/diff_curr)
}
match_matrix <- data[1:20,7:16]
diff_coeff[1] <- match_diff_coeff(data[1,6], match_matrix[1,])
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of a team based on its first ten results of the current season
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_vector{
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)
# Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
}
match_matrix <- data[1:20,7:16]
diff_coeff[1] <- match_diff_coeff(data[1,6], match_matrix[1,])
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)
# Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
}
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector /2)
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
}
current_diff <- sum(20 - as.numeric(match_vector)/2
diff_futur <- max_diff - current_diff
current_diff <- sum(20 - as.numeric(match_vector)
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
max_diff <- 187 - (20 - current_points)
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector)
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
}
match_diff_coeff <- function(current_points, match_vector){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_vector))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
}
match_matrix <- data[1:20,7:16]
diff_coeff[1] <- match_diff_coeff(data[1,6], match_matrix[1,])
diff_coeff <- match_diff_coeff(data[1,6], match_matrix[1,])
diff_coeff <- c(rep(0,20),1)
diff_coeff <- c(rep(0,20))
diff_coeff[1:20] <- match_diff_coeff(data[1:20,6], match_matrix[1:20,])
diff_coeff[i] <- match_diff_coeff(data[i,6], match_matrix[i,])
diff_coeff
View(match_matrix)
for(i in 1:20){
diff_coeff[i] <- match_diff_coeff(data[i,6], match_matrix[i,])
}
diff_coeff
match_diff_coeff <- function(current_points, match_matrix){
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
current_diff <- sum(20 - as.numeric(match_matrix[,1:10]/2))
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
}
score_team_qual <- function(team_points, leader_points, last_team_points){
score_team_qual <- function(team_points, leader_points, last_team_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_team_points
return(qual_score)
}
#' Team Current Form Score function
#'
#' This function assigns a score evaluating the current form
#' of a team based on its first ten results of the current season
#'
#' [INSERT MOTIVATION OF CURENT FORM FORMULA]
#'
#' Formula:
#' Team_i score = (1 - (Leader points - Team_i points) / leader points ) * last team points
#'
#' @export
#' @examples
#' score_team_form()
score_team_form <- function(current_points, difficulty_coefficient){
form_score <- coeff_diff*current_points + current_points
return(form_score)
}
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of all teams based on the first ten results of the current season.
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
# Note: Couldn't find a way to get rid of the for-loop, if anyone has an idea...
for(i in 1:n){
current_diff[i] <- sum(20 - as.numeric(match_matrix[i,1:10]/2))
}
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
rm(list=ls())
# Create dataframe
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
## 1. Define variables
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
coeff_diff <- c(rep(0,20))
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
rm(list=ls())
rm(list=ls())
score_team_qual <- function(team_points, leader_points, last_team_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_team_points
return(qual_score)
}
#' Team Current Form Score function
#'
#' This function assigns a score evaluating the current form
#' of a team based on its first ten results of the current season
#'
#' [INSERT MOTIVATION OF CURENT FORM FORMULA]
#'
#' Formula:
#' Team_i score = (1 - (Leader points - Team_i points) / leader points ) * last team points
#'
#' @export
#' @examples
#' score_team_form()
score_team_form <- function(current_points, difficulty_coefficient){
form_score <- coeff_diff*current_points + current_points
return(form_score)
}
#' Match Difficulty Coefficient function
#'
#' This function assigns a score evaluating the current form
#' of all teams based on the first ten results of the current season.
#'
#' [INSERT MOTIVATION OF DIFFICULTY COEFF COMPUTATION]
#'
#' Formula:
#' [INSERT FORMULA]
#'
#' @export
#' @examples
#' match_diff_coeff()
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
# Note: Couldn't find a way to get rid of the for-loop, if anyone has an idea...
for(i in 1:n){
current_diff[i] <- sum(20 - as.numeric(match_matrix[i,1:10]/2))
}
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
coeff_diff <- c(rep(0,20))
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17")]
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
score_team_qual <- function(team_points, leader_points, last_team_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_team_points
return(qual_score)
}
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
score_team_form <- function(current_points, difficulty_coefficient){
form_score <- coeff_diff*current_points + current_points
return(form_score)
}
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
# Note: Couldn't find a way to get rid of the for-loop, if anyone has an idea...
for(i in 1:n){
current_diff[i] <- sum(20 - as.numeric(match_matrix[i,1:10]/2))
}
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
match_matrix <- as.matrix(data[1:20,7:16])
current_points <- as.matrix(data[1:20,6])
diff_coeff <- match_diff_coeff(current_points, match_matrix)
data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
output_data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
output_data$PointsPredicted <- round(alpha_1*data$Qual + alpha_2*data$Form, digits = 0)
output_data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
output_data$PointsPredicted <- round(alpha_1*output_data$Qual.Score + alpha_2*output_data$Form, digits = 0)
output_data <- output_data[order(PointsPredicted, decreasing = TRUE), ]
output_data
output_data <- output_data[order(PointsPredicted, decreasing = TRUE), ]
output_data <- output_data[order("PointsPredicted", decreasing = TRUE), ]
output_data
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
rm(list=ls())
raw_data <- read.csv("/Users/augustin/Documents/Programming/Les4F/Data/Ligue1-data.csv", header = TRUE, sep = ";")
data <- raw_data[1:20,c("ID","Team.Name","Standings.2015.16","Points.2015.16","Standings.2016.17","Points.2016.17","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10")]
n = 20
alpha_1 <- 0.7
alpha_2 <- 0.3
coeff_diff <- c(rep(0,20))
Points_toul_16 <- data[4,4]
Points_psg_16 <- data[3,4]
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17")]
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
score_team_qual <- function(team_points, leader_points, last_team_points){
qual_score <- (1-((leader_points - team_points)/ leader_points))*last_team_points
return(qual_score)
}
score_team_form <- function(current_points, difficulty_coefficient){
form_score <- coeff_diff*current_points + current_points
return(form_score)
}
match_diff_coeff <- function(current_points, match_matrix){
# Define variables
n <- length(current_points)
max_diff <- c(rep(0, n))
current_diff <- c(rep(0, n))
diff_futur <- c(rep(0, n))
coeff_diff <- c(rep(0, n))
# Compute the maximum difficulty possible (team plays against all teams including self)
max_diff <- 187 - (20 - current_points)
# Compute the difficulty of first ten match played
# Note: Couldn't find a way to get rid of the for-loop, if anyone has an idea...
for(i in 1:n){
current_diff[i] <- sum(20 - as.numeric(match_matrix[i,1:10]/2))
}
#Compute difficulty of future matches
diff_futur <- max_diff - current_diff
# Compute difficulty coefficient
coeff_diff <- (diff_futur/current_diff)
return(coeff_diff)
}
View(output_data)
output_data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
match_matrix <- as.matrix(data[1:20,7:16])
current_points <- as.matrix(data[1:20,6])
diff_coeff <- match_diff_coeff(current_points, match_matrix)
output_data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
data$Qual.Score <- score_team_qual(data$Points.2015.16, Points_psg_16, Points_toul_16)
data$Form[1:20] <- (coeff_diff*data$Points.2016.17 + data$Points.2016.17)
data$PointsPredicted <- round(alpha_1*output_data$Qual.Score + alpha_2*output_data$Form, digits = 0)
View(data)
data$PointsPredicted <- round(alpha_1*output_data$Qual.Score + alpha_2*output_data$Form, digits = 0)
output_data <- data[ ,c("ID","Team.Name","Points.2015.16","Points.2016.17","Qual.Score","Form","PointsPredicted")]
output_data
output_data <- output_data[order(PointsPredicted, decreasing = TRUE), ]
output_data <- output_data[order(output_data$PointsPredicted, decreasing = TRUE), ]
